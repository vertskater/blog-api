// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  role      Role      @default(USER)
  posts     Post[]    @relation("UserPosts")
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  ApiKey    ApiKey[]
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  published Boolean   @default(false)
  author    User      @relation("UserPosts", fields: [authorId], references: [id])
  authorId  Int
  comments  Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id       Int    @id @default(autoincrement())
  content  String
  post     Post   @relation(fields: [postId], references: [id])
  postId   Int
  author   User   @relation(fields: [authorId], references: [id])
  authorId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ApiKey {
  id          Int          @id @default(autoincrement())
  key         String       @unique
  clientName  String // Name or description of the client using the API key (e.g., "Mobile App")
  usageCount  Int          @default(0)
  maxRequests Int          @default(1000)
  createdAt   DateTime     @default(now())
  expiresAt   DateTime? // Optional expiration date
  status      ApiKeyStatus @default(ACTIVE) // Status of the API key (ACTIVE, REVOKED)
  ownerId     Int // Foreign key to associate with a user or client
  owner       User         @relation(fields: [ownerId], references: [id])
}

enum ApiKeyStatus {
  ACTIVE
  REVOKED
}

enum Role {
  ADMIN
  USER
}
